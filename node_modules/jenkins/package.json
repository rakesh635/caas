{
  "name": "jenkins",
  "description": "Jenkins client",
  "version": "0.17.0",
  "main": "./lib",
  "dependencies": {
    "papi": "^0.25.0"
  },
  "devDependencies": {
    "async": "^0.9.0",
    "bluebird": "^3.1.1",
    "fixturefiles": "^0.1.0",
    "istanbul": "^0.3.6",
    "jscs": "^1.5.8",
    "jshint": "^2.5.2",
    "lodash": "^3.3.1",
    "mocha": "^2.0.1",
    "nock": "^1.4.0",
    "node-uuid": "^1.4.1",
    "should": "^5.0.1",
    "sinon": "^1.17.2"
  },
  "keywords": [
    "jenkins"
  ],
  "author": {
    "name": "Silas Sewell",
    "email": "silas@sewell.org"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/silas/node-jenkins.git"
  },
  "bugs": {
    "url": "https://github.com/silas/node-jenkins/issues"
  },
  "scripts": {
    "cover": "istanbul cover ./node_modules/.bin/_mocha -- --recursive --check-leaks --timeout 15000 && open coverage/lcov-report/index.html",
    "test": "jshint lib test && ./node_modules/.bin/jscs lib test && ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --recursive --check-leaks --timeout 15000"
  },
  "readme": "# Jenkins [![Build Status](https://secure.travis-ci.org/silas/node-jenkins.png?branch=master)](http://travis-ci.org/silas/node-jenkins)\n\nThis is a Node.js client for [Jenkins](http://jenkins-ci.org/).\n\n## Documentation\n\n * jenkins: [init](#init), [info](#info)\n * build: [get](#build-get), [log](#build-log), [stop](#build-stop)\n * job: [build](#job-build), [get config](#job-config-get), [set config](#job-config-set), [copy](#job-config-copy), [create](#job-create), [destroy](#job-destroy), [disable](#job-disable), [enable](#job-enable), [exists](#job-exists), [get](#job-get), [list](#job-list)\n * node: [create](#node-create), [destroy](#node-destroy), [disconnect](#node-disconnect), [disable](#node-disable), [enable](#node-enable), [exists](#node-exists), [get](#node-get), [list](#node-list)\n * queue: [list](#queue-list), [cancel](#queue-cancel)\n * view: [get config](#view-config-get), [set config](#view-config-set), [create](#view-create), [destroy](#view-destroy), [exists](#view-exists), [get](#view-get), [list](#view-list), [add job](#view-add), [remove job](#view-remove)\n\n<a name=\"promise\"></a>\n### Promise\n\nPromise support can be enabled by setting `promisify` to `true` in Node `>= 0.12` or passing a wrapper (ex: `bluebird.fromCallback`) in older versions.\n\n<a name=\"common-options\"></a>\n### Common Options\n\nThese options will be passed along with any call, although only certain endpoints support them.\n\n * depth (Number, default: 0): how much data to return (see [depth control](https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API#RemoteaccessAPI-Depthcontrol))\n * tree (String, optional): path expression (see Jenkins API documentation for more information)\n\n<a name=\"init\"></a>\n### jenkins([options])\n\nInitialize a new Jenkins client.\n\nOptions\n\n * baseUrl (String): Jenkins URL\n * headers (Object, optional): headers included in every request\n * promisify (Boolean|Function, optional): convert callback methods to promises\n\nUsage\n\n``` javascript\nvar jenkins = require('jenkins')('http://user:pass@localhost:8080');\n```\n\n<a name=\"info\"></a>\n### jenkins.info(callback)\n\nGet server information.\n\nUsage\n\n``` javascript\njenkins.info(function(err, data) {\n  if (err) throw err;\n\n  console.log('info', data);\n});\n```\n\nResult\n\n``` json\n{\n  \"assignedLabels\": [\n    {}\n  ],\n  \"description\": null,\n  \"jobs\": [\n    {\n      \"color\": \"blue\",\n      \"name\": \"example\",\n      \"url\": \"http://localhost:8080/job/example/\"\n    }\n  ],\n  \"mode\": \"NORMAL\",\n  \"nodeDescription\": \"the master Jenkins node\",\n  \"nodeName\": \"\",\n  \"numExecutors\": 2,\n  \"overallLoad\": {},\n  \"primaryView\": {\n    \"name\": \"All\",\n    \"url\": \"http://localhost:8080/\"\n  },\n  \"quietingDown\": false,\n  \"slaveAgentPort\": 12345,\n  \"unlabeledLoad\": {},\n  \"useCrumbs\": false,\n  \"useSecurity\": false,\n  \"views\": [\n    {\n      \"name\": \"All\",\n      \"url\": \"http://localhost:8080/\"\n    }\n  ]\n}\n```\n\n<a name=\"build-get\"></a>\n### jenkins.build.get(options, callback)\n\nGet build information.\n\nOptions\n\n * name (String): job name\n * number (Integer): build number\n\nUsage\n\n``` javascript\njenkins.build.get('example', 1, function(err, data) {\n  if (err) throw err;\n\n  console.log('build', data);\n});\n```\n\nResult\n\n``` json\n{\n  \"actions\": [],\n  \"buildable\": true,\n  \"builds\": [\n    {\n      \"number\": 1,\n      \"url\": \"http://localhost:8080/job/example/1/\"\n    }\n  ],\n  \"color\": \"blue\",\n  \"concurrentBuild\": false,\n  \"description\": \"\",\n  \"displayName\": \"example\",\n  \"displayNameOrNull\": null,\n  \"downstreamProjects\": [],\n  \"firstBuild\": {\n    \"number\": 1,\n    \"url\": \"http://localhost:8080/job/example/1/\"\n  },\n  \"healthReport\": [\n    {\n      \"description\": \"Build stability: No recent builds failed.\",\n      \"iconUrl\": \"health-80plus.png\",\n      \"score\": 100\n    }\n  ],\n  \"inQueue\": false,\n  \"keepDependencies\": false,\n  \"lastBuild\": {\n    \"number\": 1,\n    \"url\": \"http://localhost:8080/job/example/1/\"\n  },\n  \"lastCompletedBuild\": {\n    \"number\": 1,\n    \"url\": \"http://localhost:8080/job/example/1/\"\n  },\n  \"lastFailedBuild\": null,\n  \"lastStableBuild\": {\n    \"number\": 1,\n    \"url\": \"http://localhost:8080/job/example/1/\"\n  },\n  \"lastSuccessfulBuild\": {\n    \"number\": 1,\n    \"url\": \"http://localhost:8080/job/example/1/\"\n  },\n  \"lastUnstableBuild\": null,\n  \"lastUnsuccessfulBuild\": null,\n  \"name\": \"example\",\n  \"nextBuildNumber\": 2,\n  \"property\": [],\n  \"queueItem\": null,\n  \"scm\": {},\n  \"upstreamProjects\": [],\n  \"url\": \"http://localhost:8080/job/example/\"\n}\n```\n\n<a name=\"build-log\"></a>\n### jenkins.build.log(options, callback)\n\nGet build log.\n\nOptions\n\n* name (String): job name\n* number (Integer): build number\n\nUsage\n\n``` javascript\njenkins.build.log('example', 1, function(err, data) {\n  if (err) throw err;\n\n  console.log('buildLog', data);\n});\n```\n<a name=\"build-stop\"></a>\n### jenkins.build.stop(options, callback)\n\nStop build.\n\nOptions\n\n * name (String): job name\n * number (Integer): build number\n\nUsage\n\n``` javascript\njenkins.build.stop('example', 1, function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"job-build\"></a>\n### jenkins.job.build(options, callback)\n\nTrigger build.\n\nOptions\n\n * name (String): job name\n * parameters (Object, optional): build parameters\n * token (String, optional): authorization token\n\nUsage\n\n``` javascript\njenkins.job.build('example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"job-config-get\"></a>\n### jenkins.job.config(options, callback)\n\nGet job XML configuration.\n\nOptions\n\n * name (String): job name\n\nUsage\n\n``` javascript\njenkins.job.config('example', function(err, data) {\n  if (err) throw err;\n\n  console.log('xml', data);\n});\n```\n\n<a name=\"job-config-set\"></a>\n### jenkins.job.config(options, callback)\n\nUpdate job XML configuration.\n\nOptions\n\n * name (String): job name\n * xml (String): configuration XML\n\nUsage\n\n``` javascript\njenkins.job.config('example', xml, function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"job-config-copy\"></a>\n### jenkins.job.copy(options, callback)\n\nCreate job by copying existing job.\n\nOptions\n\n * name (String): new job name\n * from (String): source job name\n\nUsage\n\n``` javascript\njenkins.job.copy('fromJob', 'example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"job-create\"></a>\n### jenkins.job.create(options, callback)\n\nCreate job from scratch.\n\nOptions\n\n * name (String): job name\n * xml (String): configuration XML\n\nUsage\n\n``` javascript\njenkins.job.create('example', xml, function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"job-destroy\"></a>\n### jenkins.job.destroy(options, callback)\n\nDelete job.\n\nOptions\n\n * name (String): job name\n\nUsage\n\n``` javascript\njenkins.job.destroy('example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"job-disable\"></a>\n### jenkins.job.disable(options, callback)\n\nDisable job.\n\nOptions\n\n * name (String): job name\n\nUsage\n\n``` javascript\njenkins.job.disable('example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"job-enable\"></a>\n### jenkins.job.enable(options, callback)\n\nEnable job.\n\nOptions\n\n * name (String): job name\n\nUsage\n\n``` javascript\njenkins.job.enable('example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"job-exists\"></a>\n### jenkins.job.exists(options, callback)\n\nCheck job exists.\n\nOptions\n\n * name (String): job name\n\nUsage\n\n``` javascript\njenkins.job.exists('example', function(err, exists) {\n  if (err) throw err;\n\n  console.log('exists', exists);\n});\n```\n\n<a name=\"job-get\"></a>\n### jenkins.job.get(options, callback)\n\nGet job information.\n\nOptions\n\n * name (String): job name\n\nUsage\n\n``` javascript\njenkins.job.get('example', function(err, data) {\n  if (err) throw err;\n\n  console.log('job', data);\n});\n```\n\nResult\n\n``` json\n{\n  \"actions\": [],\n  \"buildable\": true,\n  \"builds\": [\n    {\n      \"number\": 1,\n      \"url\": \"http://localhost:8080/job/example/1/\"\n    }\n  ],\n  \"color\": \"blue\",\n  \"concurrentBuild\": false,\n  \"description\": \"\",\n  \"displayName\": \"example\",\n  \"displayNameOrNull\": null,\n  \"downstreamProjects\": [],\n  \"firstBuild\": {\n    \"number\": 1,\n    \"url\": \"http://localhost:8080/job/example/1/\"\n  },\n  \"healthReport\": [\n    {\n      \"description\": \"Build stability: No recent builds failed.\",\n      \"iconUrl\": \"health-80plus.png\",\n      \"score\": 100\n    }\n  ],\n  \"inQueue\": false,\n  \"keepDependencies\": false,\n  \"lastBuild\": {\n    \"number\": 1,\n    \"url\": \"http://localhost:8080/job/example/1/\"\n  },\n  \"lastCompletedBuild\": {\n    \"number\": 1,\n    \"url\": \"http://localhost:8080/job/example/1/\"\n  },\n  \"lastFailedBuild\": null,\n  \"lastStableBuild\": {\n    \"number\": 1,\n    \"url\": \"http://localhost:8080/job/example/1/\"\n  },\n  \"lastSuccessfulBuild\": {\n    \"number\": 1,\n    \"url\": \"http://localhost:8080/job/example/1/\"\n  },\n  \"lastUnstableBuild\": null,\n  \"lastUnsuccessfulBuild\": null,\n  \"name\": \"example\",\n  \"nextBuildNumber\": 2,\n  \"property\": [],\n  \"queueItem\": null,\n  \"scm\": {},\n  \"upstreamProjects\": [],\n  \"url\": \"http://localhost:8080/job/example/\"\n}\n```\n\n<a name=\"job-list\"></a>\n### jenkins.job.list(callback)\n\nList all jobs.\n\nUsage\n\n``` javascript\njenkins.job.list(function(err, data) {\n  if (err) throw err;\n\n  console.log('jobs', data);\n});\n```\n\nResult\n\n``` json\n[\n  {\n    \"color\": \"blue\",\n    \"name\": \"example\",\n    \"url\": \"http://localhost:8080/job/example/\"\n  }\n]\n```\n\n<a name=\"node-create\"></a>\n### jenkins.node.create(options, callback)\n\nCreate node.\n\nOptions\n\n * name (String): node name\n\nUsage\n\n``` javascript\njenkins.node.create('slave', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"node-destroy\"></a>\n### jenkins.node.destroy(options, callback)\n\nDelete node.\n\nOptions\n\n * name (String): node name\n\nUsage\n\n``` javascript\njenkins.node.destroy('slave', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"node-disconnect\"></a>\n### jenkins.node.disconnect(options, callback)\n\nDisconnect node.\n\nOptions\n\n * name (String): node name\n * message (String, optional): reason for being disconnected\n\nUsage\n\n``` javascript\njenkins.node.disconnect('slave', 'no longer used', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"node-disable\"></a>\n### jenkins.node.disable(options, callback)\n\nDisable node.\n\nOptions\n\n * name (String): node name\n * message (String, optional): reason for being disabled\n\nUsage\n\n``` javascript\njenkins.node.disable('slave', 'network failure', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"node-enable\"></a>\n### jenkins.node.enable(options, callback)\n\nEnable node.\n\nOptions\n\n * name (String): node name\n\nUsage\n\n``` javascript\njenkins.node.enable('slave', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"node-exists\"></a>\n### jenkins.node.exists(options, callback)\n\nCheck node exists.\n\nOptions\n\n * name (String): node name\n\nUsage\n\n``` javascript\njenkins.node.exists('slave', function(err, exists) {\n  if (err) throw err;\n\n  console.log('exists', exists);\n});\n```\n\n<a name=\"node-get\"></a>\n### jenkins.node.get(options, callback)\n\nGet node information.\n\nOptions\n\n * name (String): node name\n\nUsage\n\n``` javascript\njenkins.node.get('slave', function(err, data) {\n  if (err) throw err;\n\n  console.log('node', data);\n});\n```\n\nResult\n\n``` json\n{\n  \"actions\": [],\n  \"displayName\": \"slave\",\n  \"executors\": [\n    {},\n    {}\n  ],\n  \"icon\": \"computer-x.png\",\n  \"idle\": true,\n  \"jnlpAgent\": true,\n  \"launchSupported\": false,\n  \"loadStatistics\": {},\n  \"manualLaunchAllowed\": true,\n  \"monitorData\": {\n    \"hudson.node_monitors.ArchitectureMonitor\": null,\n    \"hudson.node_monitors.ClockMonitor\": null,\n    \"hudson.node_monitors.DiskSpaceMonitor\": null,\n    \"hudson.node_monitors.ResponseTimeMonitor\": {\n      \"average\": 5000\n    },\n    \"hudson.node_monitors.SwapSpaceMonitor\": null,\n    \"hudson.node_monitors.TemporarySpaceMonitor\": null\n  },\n  \"numExecutors\": 2,\n  \"offline\": true,\n  \"offlineCause\": null,\n  \"offlineCauseReason\": \"\",\n  \"oneOffExecutors\": [],\n  \"temporarilyOffline\": false\n}\n```\n\n<a name=\"node-list\"></a>\n### jenkins.node.list(callback)\n\nList all nodes.\n\nOptions\n\n * full (Boolean, default: false): include executor count in response\n\nUsage\n\n``` javascript\njenkins.node.list(function(err, data) {\n  if (err) throw err;\n\n  console.log('nodes', data);\n});\n```\n\nResult\n\n``` json\n{\n  \"busyExecutors\": 0,\n  \"computer\": [\n    {\n      \"actions\": [],\n      \"displayName\": \"master\",\n      \"executors\": [\n        {},\n        {}\n      ],\n      \"icon\": \"computer.png\",\n      \"idle\": true,\n      \"jnlpAgent\": false,\n      \"launchSupported\": true,\n      \"loadStatistics\": {},\n      \"manualLaunchAllowed\": true,\n      \"monitorData\": {\n        \"hudson.node_monitors.ArchitectureMonitor\": \"Linux (amd64)\",\n        \"hudson.node_monitors.ClockMonitor\": {\n          \"diff\": 0\n        },\n        \"hudson.node_monitors.DiskSpaceMonitor\": {\n          \"path\": \"/var/lib/jenkins\",\n          \"size\": 77620142080\n        },\n        \"hudson.node_monitors.ResponseTimeMonitor\": {\n          \"average\": 0\n        },\n        \"hudson.node_monitors.SwapSpaceMonitor\": {\n          \"availablePhysicalMemory\": 22761472,\n          \"availableSwapSpace\": 794497024,\n          \"totalPhysicalMemory\": 515358720,\n          \"totalSwapSpace\": 805302272\n        },\n        \"hudson.node_monitors.TemporarySpaceMonitor\": {\n          \"path\": \"/tmp\",\n          \"size\": 77620142080\n        }\n      },\n      \"numExecutors\": 2,\n      \"offline\": false,\n      \"offlineCause\": null,\n      \"offlineCauseReason\": \"\",\n      \"oneOffExecutors\": [],\n      \"temporarilyOffline\": false\n    },\n    {\n      \"actions\": [],\n      \"displayName\": \"slave\",\n      \"executors\": [\n        {},\n        {}\n      ],\n      \"icon\": \"computer-x.png\",\n      \"idle\": true,\n      \"jnlpAgent\": true,\n      \"launchSupported\": false,\n      \"loadStatistics\": {},\n      \"manualLaunchAllowed\": true,\n      \"monitorData\": {\n        \"hudson.node_monitors.ArchitectureMonitor\": null,\n        \"hudson.node_monitors.ClockMonitor\": null,\n        \"hudson.node_monitors.DiskSpaceMonitor\": null,\n        \"hudson.node_monitors.ResponseTimeMonitor\": {\n          \"average\": 5000\n        },\n        \"hudson.node_monitors.SwapSpaceMonitor\": null,\n        \"hudson.node_monitors.TemporarySpaceMonitor\": null\n      },\n      \"numExecutors\": 2,\n      \"offline\": true,\n      \"offlineCause\": null,\n      \"offlineCauseReason\": \"\",\n      \"oneOffExecutors\": [],\n      \"temporarilyOffline\": false\n    }\n  ],\n  \"displayName\": \"nodes\",\n  \"totalExecutors\": 2\n}\n```\n\n<a name=\"queue-list\"></a>\n### jenkins.queue.list(callback)\n\nList queues.\n\nUsage\n\n``` javascript\njenkins.queue.list(function(err, data) {\n  if (err) throw err;\n\n  console.log('queues', data);\n});\n```\n\nResult\n\n``` json\n{\n  \"items\": [\n    {\n      \"actions\": [\n        {\n          \"causes\": [\n            {\n              \"shortDescription\": \"Started by user anonymous\",\n              \"userId\": null,\n              \"userName\": \"anonymous\"\n            }\n          ]\n        }\n      ],\n      \"blocked\": true,\n      \"buildable\": false,\n      \"buildableStartMilliseconds\": 1389418977387,\n      \"id\": 20,\n      \"inQueueSince\": 1389418977358,\n      \"params\": \"\",\n      \"stuck\": false,\n      \"task\": {\n        \"color\": \"blue_anime\",\n        \"name\": \"example\",\n        \"url\": \"http://localhost:8080/job/example/\"\n      },\n      \"url\": \"queue/item/20/\",\n      \"why\": \"Build #2 is already in progress (ETA:N/A)\"\n    }\n  ]\n}\n```\n\n<a name=\"queue-item\"></a>\n### jenkins.queue.item(options, callback)\n\nLookup a queue item.\n\nOptions\n\n * number (Integer): queue item number\n\nUsage\n\n``` javascript\njenkins.queue.item(130, function(err, data) {\n  if (err) throw err;\n\n  console.log('item', data);\n});\n```\n\nResult\n\n``` json\n{\n  \"actions\": [\n    {\n      \"causes\": [\n        {\n          \"shortDescription\": \"Started by user anonymous\",\n          \"userId\": null,\n          \"userName\": \"anonymous\"\n        }\n      ]\n    }\n  ],\n  \"blocked\": false,\n  \"buildable\": false,\n  \"id\": 130,\n  \"inQueueSince\": 1406363479853,\n  \"params\": \"\",\n  \"stuck\": false,\n  \"task\": {\n    \"name\": \"test-job-b7ef0845-6515-444c-96a1-d2266d5e0f18\",\n    \"url\": \"http://localhost:8080/job/test-job-b7ef0845-6515-444c-96a1-d2266d5e0f18/\",\n    \"color\": \"blue\"\n  },\n  \"url\": \"queue/item/130/\",\n  \"why\": null,\n  \"executable\" : {\n    \"number\" : 28,\n    \"url\" : \"http://localhost:8080/job/test-job-b7ef0845-6515-444c-96a1-d2266d5e0f18/28/\"\n  }\n}\n```\n\n\n\n<a name=\"queue-cancel\"></a>\n### jenkins.queue.cancel(options, callback)\n\nCancel build in queue.\n\nOptions\n\n * number (Integer): queue item id\n\nUsage\n\n``` javascript\njenkins.queue.cancel(23, function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"view-config-get\"></a>\n### jenkins.view.config(options, callback)\n\nGet view XML configuration.\n\nOptions\n\n * name (String): job name\n\nUsage\n\n``` javascript\njenkins.view.config('example', function(err, data) {\n  if (err) throw err;\n\n  console.log('xml', data);\n});\n```\n\n<a name=\"view-config-set\"></a>\n### jenkins.job.config(options, callback)\n\nUpdate view XML configuration.\n\nOptions\n\n * name (String): job name\n * xml (String): configuration XML\n\nUsage\n\n``` javascript\njenkins.view.config('example', xml, function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"view-create\"></a>\n### jenkins.view.create(options, callback)\n\nCreate view.\n\nOptions\n\n * name (String): view name\n * type (String, enum: list, my): view type\n\nUsage\n\n``` javascript\njenkins.view.create('example', 'list', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"view-destroy\"></a>\n### jenkins.view.destroy(options, callback)\n\nDelete view.\n\nOptions\n\n * name (String): view name\n\nUsage\n\n``` javascript\njenkins.view.destroy('example', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"view-exists\"></a>\n### jenkins.view.exists(options, callback)\n\nCheck view exists.\n\nOptions\n\n * name (String): view name\n\nUsage\n\n``` javascript\njenkins.view.exists('example', function(err, exists) {\n  if (err) throw err;\n\n  console.log('exists', exists);\n});\n```\n\n<a name=\"view-get\"></a>\n### jenkins.view.get(options, callback)\n\nGet view information.\n\nOptions\n\n * name (String): view name\n\nUsage\n\n``` javascript\njenkins.view.get('example', function(err, data) {\n  if (err) throw err;\n\n  console.log('view', data);\n});\n```\n\nResult\n\n``` json\n{\n  \"description\": null,\n  \"jobs\": [\n    {\n      \"name\": \"test\",\n      \"url\": \"http://localhost:8080/job/example/\",\n      \"color\": \"blue\"\n    }\n  ],\n  \"name\": \"example\",\n  \"property\": [],\n  \"url\": \"http://localhost:8080/view/example/\"\n}\n```\n\n<a name=\"view-list\"></a>\n### jenkins.view.list(callback)\n\nList all views.\n\nUsage\n\n``` javascript\njenkins.view.list(function(err, data) {\n  if (err) throw err;\n\n  console.log('views', data);\n});\n```\n\nResult\n\n``` json\n{\n  \"views\": [\n    {\n      \"url\": \"http://localhost:8080/\",\n      \"name\": \"All\"\n    },\n    {\n      \"url\": \"http://localhost:8080/view/example/\",\n      \"name\": \"Test\"\n    }\n  ],\n  \"useSecurity\": false,\n  \"useCrumbs\": false,\n  \"unlabeledLoad\": {},\n  \"slaveAgentPort\": 0,\n  \"quietingDown\": false,\n  \"primaryView\": {\n    \"url\": \"http://localhost:8080/\",\n    \"name\": \"All\"\n  },\n  \"assignedLabels\": [\n    {}\n  ],\n  \"mode\": \"NORMAL\",\n  \"nodeDescription\": \"the master Jenkins node\",\n  \"nodeName\": \"\",\n  \"numExecutors\": 2,\n  \"description\": null,\n  \"jobs\": [\n    {\n      \"color\": \"notbuilt\",\n      \"url\": \"http://localhost:8080/job/example/\",\n      \"name\": \"test\"\n    }\n  ],\n  \"overallLoad\": {}\n}\n```\n\n<a name=\"view-add\"></a>\n### jenkins.view.add(options, callback)\n\nAdd job to view.\n\nOptions\n\n * name (String): view name\n * job (String): job name\n\nUsage\n\n``` javascript\njenkins.view.add('example', 'jobExample', function(err) {\n  if (err) throw err;\n});\n```\n\n<a name=\"view-remove\"></a>\n### jenkins.view.remove(options, callback)\n\nRemove job from view.\n\nOptions\n\n * name (String): view name\n * job (String): job name\n\nUsage\n\n``` javascript\njenkins.view.remove('example', 'jobExample', function(err) {\n  if (err) throw err;\n});\n```\n\n## License\n\nThis work is licensed under the MIT License (see the LICENSE file).\n\n## Notes\n\n[python-jenkins](https://github.com/openstack/python-jenkins) (BSD License, see NOTES)\nwas used as a reference when implementing this client and its\ncreate/reconfigure job XML was used in the tests.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/silas/node-jenkins",
  "_id": "jenkins@0.17.0",
  "_shasum": "fa5c16c874dc67ee8977441906d98e7fc5945176",
  "_from": "jenkins@^0.17.0",
  "_resolved": "https://registry.npmjs.org/jenkins/-/jenkins-0.17.0.tgz"
}
